{"version":3,"sources":["analytics.service.js","meanie-angular-analytics.min.js"],"names":["window","angular","undefined","module","provider","this","isEnabled","setEnabled","$get","$window","$location","ga","apply","arguments","q","push","l","Date","Analytics","enable","disable","create","trackingId","name","config","extend","cookieDomain","set","appName","appId","id","appVersion","version","userId","dataSource","screenName","documentTitle","title","hostname","page","campaignName","campaignId","campaignSource","source","campaignMedium","medium","campaignKeyword","keyword","campaignContent","content","language","encoding","anonymizeIp","track","pageview","hitType","url","screenview","event","category","action","label","value","eventCategory","eventAction","eventLabel","eventValue","social","network","target","socialNetwork","socialAction","socialTarget","exception","description","isFatal","exDescription","exFatal","timing","variable","timingCategory","timingVar","timingValue","timingLabel"],"mappings":"CAOA,SAAAA,EAAAC,EAAAC,GAAA,YAKAD,GAAAE,OAAA,wBAKAC,SAAA,aAAA,WAKAC,KAAAC,WAAA,EAKAD,KAAAE,WAAA,SAAAD,GACAD,KAAAC,YAAAA,GAMAD,KAAAG,MAAA,UAAA,YAAA,SAAAC,EAAAC,GAgBA,QAAAC,KACAL,GACAG,EAAAE,GAAAC,MAAAV,EAAAW,WAfA,GAAAP,GAAAD,KAAAC,SAKAG,GAAAE,GAAAF,EAAAE,IAAA,YACAF,EAAAE,GAAAG,EAAAL,EAAAE,GAAAG,OAAAC,KAAAF,YAEAJ,EAAAE,GAAAK,GAAA,GAAAC,KAcA,IAAAC,IAKAC,OAAA,WACAb,GAAA,GAMAc,QAAA,WACAd,GAAA,GAMAA,UAAA,WACA,MAAAA,IAMAe,OAAA,SAAAC,EAAAC,EAAAC,GACAb,EAAA,SAAAV,EAAAwB,QACAH,WAAAA,EACAI,aAAA,OACAH,KAAAA,GACAC,SAMAG,KAKAC,QAAA,SAAAL,GACAZ,EAAA,MAAA,UAAAY,IAMAM,MAAA,SAAAC,GACAnB,EAAA,MAAA,QAAAmB,IAMAC,WAAA,SAAAC,GACArB,EAAA,MAAA,aAAAqB,IAMAC,OAAA,SAAAA,GACAtB,EAAA,MAAA,SAAAsB,IAMAC,WAAA,SAAAA,GACAvB,EAAA,MAAA,aAAAuB,IAMAC,WAAA,SAAAA,GACAxB,EAAA,MAAA,aAAAwB,IAMAC,cAAA,SAAAC,GACA1B,EAAA,MAAA,QAAA0B,IAMAC,SAAA,SAAAA,GACA3B,EAAA,MAAA,WAAA2B,IAMAC,KAAA,SAAAA,GACA5B,EAAA,MAAA,OAAA4B,IAMAC,aAAA,SAAAjB,GACAZ,EAAA,MAAA,eAAAY,IAMAkB,WAAA,SAAAX,GACAnB,EAAA,MAAA,aAAAmB,IAMAY,eAAA,SAAAC,GACAhC,EAAA,MAAA,iBAAAgC,IAMAC,eAAA,SAAAC,GACAlC,EAAA,MAAA,iBAAAkC,IAMAC,gBAAA,SAAAC,GACApC,EAAA,MAAA,kBAAAoC,IAMAC,gBAAA,SAAAC,GACAtC,EAAA,MAAA,kBAAAsC,IAMAC,SAAA,SAAAA,GACAvC,EAAA,MAAA,WAAAuC,IAMAC,SAAA,SAAAA,GACAxC,EAAA,MAAA,WAAAwC,IAMAC,YAAA,SAAAA,GACAzC,EAAA,MAAA,gBAAAyC,KAOAC,OAKAC,SAAA,SAAAf,GACA5B,EAAA,QACA4C,QAAA,WACAhB,KAAAA,GAAA7B,EAAA8C,SAOAC,WAAA,SAAAtB,GACAxB,EAAA,QACA4C,QAAA,aACApB,WAAAA,KAOAuB,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAnD,EAAA,QACA4C,QAAA,QACAQ,cAAAJ,EACAK,YAAAJ,EACAK,WAAAJ,EACAK,WAAAJ,KAOAK,OAAA,SAAAC,EAAAR,EAAAS,GACA1D,EAAA,QACA4C,QAAA,SACAe,cAAAF,EACAG,aAAAX,EACAY,aAAAH,KAOAI,UAAA,SAAAC,EAAAC,GACAhE,EAAA,QACA4C,QAAA,YACAqB,cAAAF,EACAG,UAAAF,KAOAG,OAAA,SAAAnB,EAAAoB,EAAAjB,EAAAD,GACAlD,EAAA,QACA4C,QAAA,SACAyB,eAAArB,EACAsB,UAAAF,EACAG,YAAApB,EACAqB,YAAAtB,MCOI,OAAO3C,QAIRlB,OAAQA,OAAOC","file":"meanie-angular-analytics.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Analytics.Service', [])\n\n/**\n * Provider definition\n */\n.provider('$analytics', function AnalyticsProvider() {\n\n  /**\n   * Enabled flag\n   */\n  this.isEnabled = true;\n\n  /**\n   * Set default data\n   */\n  this.setEnabled = function(isEnabled) {\n    this.isEnabled = !!isEnabled;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$window', '$location', function($window, $location) {\n\n    //Check if enabled\n    var isEnabled = this.isEnabled;\n\n    /**\n     * Initialize google analytics queue\n     */\n    $window.ga = $window.ga || function() {\n      ($window.ga.q = $window.ga.q || []).push(arguments);\n    };\n    $window.ga.l = +new Date();\n\n    /**\n     * GA wrapper function\n     */\n    function ga() {\n      if (isEnabled) {\n        $window.ga.apply(undefined, arguments);\n      }\n    }\n\n    /**\n     * Class definition\n     */\n    var Analytics = {\n\n      /**\n       * Enable analytics in realtime\n       */\n      enable: function() {\n        isEnabled = true;\n      },\n\n      /**\n       * Disable analytics in realtime\n       */\n      disable: function() {\n        isEnabled = false;\n      },\n\n      /**\n       * Check if enabled\n       */\n      isEnabled: function() {\n        return isEnabled;\n      },\n\n      /**\n       * Create interface\n       */\n      create: function(trackingId, name, config) {\n        ga('create', angular.extend({\n          trackingId: trackingId,\n          cookieDomain: 'auto',\n          name: name\n        }, config || {}));\n      },\n\n      /**\n       * Set interface\n       */\n      set: {\n\n        /**\n         * Set app name\n         */\n        appName: function(name) {\n          ga('set', 'appName', name);\n        },\n\n        /**\n         * Set app ID\n         */\n        appId: function(id) {\n          ga('set', 'appId', id);\n        },\n\n        /**\n         * Set app version\n         */\n        appVersion: function(version) {\n          ga('set', 'appVersion', version);\n        },\n\n        /**\n         * Set user ID\n         */\n        userId: function(userId) {\n          ga('set', 'userId', userId);\n        },\n\n        /**\n         * Set data source\n         */\n        dataSource: function(dataSource) {\n          ga('set', 'dataSource', dataSource);\n        },\n\n        /**\n         * Set screen name\n         */\n        screenName: function(screenName) {\n          ga('set', 'screenName', screenName);\n        },\n\n        /**\n         * Set document title\n         */\n        documentTitle: function(title) {\n          ga('set', 'title', title);\n        },\n\n        /**\n         * Set hostname\n         */\n        hostname: function(hostname) {\n          ga('set', 'hostname', hostname);\n        },\n\n        /**\n         * Set page\n         */\n        page: function(page) {\n          ga('set', 'page', page);\n        },\n\n        /**\n         * Campaign name\n         */\n        campaignName: function(name) {\n          ga('set', 'campaignName', name);\n        },\n\n        /**\n         * Campaign ID\n         */\n        campaignId: function(id) {\n          ga('set', 'campaignId', id);\n        },\n\n        /**\n         * Campaign source\n         */\n        campaignSource: function(source) {\n          ga('set', 'campaignSource', source);\n        },\n\n        /**\n         * Campaign medium\n         */\n        campaignMedium: function(medium) {\n          ga('set', 'campaignMedium', medium);\n        },\n\n        /**\n         * Campaign keyword\n         */\n        campaignKeyword: function(keyword) {\n          ga('set', 'campaignKeyword', keyword);\n        },\n\n        /**\n         * Campaign content\n         */\n        campaignContent: function(content) {\n          ga('set', 'campaignContent', content);\n        },\n\n        /**\n         * Set user language\n         */\n        language: function(language) {\n          ga('set', 'language', language);\n        },\n\n        /**\n         * Set document encoding\n         */\n        encoding: function(encoding) {\n          ga('set', 'encoding', encoding);\n        },\n\n        /**\n         * Anonymize sender's IP address\n         */\n        anonymizeIp: function(anonymizeIp) {\n          ga('set', 'anonymizeIp', !!anonymizeIp);\n        }\n      },\n\n      /**\n       * Tracking interface\n       */\n      track: {\n\n        /**\n         * Register a pageview\n         */\n        pageview: function(page) {\n          ga('send', {\n            hitType: 'pageview',\n            page: page || $location.url()\n          });\n        },\n\n        /**\n         * Register a screenview\n         */\n        screenview: function(screenName) {\n          ga('send', {\n            hitType: 'screenview',\n            screenName: screenName\n          });\n        },\n\n        /**\n         * Register an event\n         */\n        event: function(category, action, label, value) {\n          ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label,\n            eventValue: value\n          });\n        },\n\n        /**\n         * Register a social hit\n         */\n        social: function(network, action, target) {\n          ga('send', {\n            hitType: 'social',\n            socialNetwork: network,\n            socialAction: action,\n            socialTarget: target\n          });\n        },\n\n        /**\n         * Register an exception\n         */\n        exception: function(description, isFatal) {\n          ga('send', {\n            hitType: 'exception',\n            exDescription: description,\n            exFatal: !!isFatal\n          });\n        },\n\n        /**\n         * Register a timing hit\n         */\n        timing: function(category, variable, value, label) {\n          ga('send', {\n            hitType: 'timing',\n            timingCategory: category,\n            timingVar: variable,\n            timingValue: value,\n            timingLabel: label\n          });\n        }\n      }\n    };\n\n    //Return\n    return Analytics;\n  }];\n});\n\n})(window, window.angular);\n","/**\n * meanie-angular-analytics - v1.0.0 - 10-0-2016\n * https://github.com/meanie/angular-analytics\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Analytics.Service', [])\n\n/**\n * Provider definition\n */\n.provider('$analytics', function AnalyticsProvider() {\n\n  /**\n   * Enabled flag\n   */\n  this.isEnabled = true;\n\n  /**\n   * Set default data\n   */\n  this.setEnabled = function(isEnabled) {\n    this.isEnabled = !!isEnabled;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$window', '$location', function($window, $location) {\n\n    //Check if enabled\n    var isEnabled = this.isEnabled;\n\n    /**\n     * Initialize google analytics queue\n     */\n    $window.ga = $window.ga || function() {\n      ($window.ga.q = $window.ga.q || []).push(arguments);\n    };\n    $window.ga.l = +new Date();\n\n    /**\n     * GA wrapper function\n     */\n    function ga() {\n      if (isEnabled) {\n        $window.ga.apply(undefined, arguments);\n      }\n    }\n\n    /**\n     * Class definition\n     */\n    var Analytics = {\n\n      /**\n       * Enable analytics in realtime\n       */\n      enable: function() {\n        isEnabled = true;\n      },\n\n      /**\n       * Disable analytics in realtime\n       */\n      disable: function() {\n        isEnabled = false;\n      },\n\n      /**\n       * Check if enabled\n       */\n      isEnabled: function() {\n        return isEnabled;\n      },\n\n      /**\n       * Create interface\n       */\n      create: function(trackingId, name, config) {\n        ga('create', angular.extend({\n          trackingId: trackingId,\n          cookieDomain: 'auto',\n          name: name\n        }, config || {}));\n      },\n\n      /**\n       * Set interface\n       */\n      set: {\n\n        /**\n         * Set app name\n         */\n        appName: function(name) {\n          ga('set', 'appName', name);\n        },\n\n        /**\n         * Set app ID\n         */\n        appId: function(id) {\n          ga('set', 'appId', id);\n        },\n\n        /**\n         * Set app version\n         */\n        appVersion: function(version) {\n          ga('set', 'appVersion', version);\n        },\n\n        /**\n         * Set user ID\n         */\n        userId: function(userId) {\n          ga('set', 'userId', userId);\n        },\n\n        /**\n         * Set data source\n         */\n        dataSource: function(dataSource) {\n          ga('set', 'dataSource', dataSource);\n        },\n\n        /**\n         * Set screen name\n         */\n        screenName: function(screenName) {\n          ga('set', 'screenName', screenName);\n        },\n\n        /**\n         * Set document title\n         */\n        documentTitle: function(title) {\n          ga('set', 'title', title);\n        },\n\n        /**\n         * Set hostname\n         */\n        hostname: function(hostname) {\n          ga('set', 'hostname', hostname);\n        },\n\n        /**\n         * Set page\n         */\n        page: function(page) {\n          ga('set', 'page', page);\n        },\n\n        /**\n         * Campaign name\n         */\n        campaignName: function(name) {\n          ga('set', 'campaignName', name);\n        },\n\n        /**\n         * Campaign ID\n         */\n        campaignId: function(id) {\n          ga('set', 'campaignId', id);\n        },\n\n        /**\n         * Campaign source\n         */\n        campaignSource: function(source) {\n          ga('set', 'campaignSource', source);\n        },\n\n        /**\n         * Campaign medium\n         */\n        campaignMedium: function(medium) {\n          ga('set', 'campaignMedium', medium);\n        },\n\n        /**\n         * Campaign keyword\n         */\n        campaignKeyword: function(keyword) {\n          ga('set', 'campaignKeyword', keyword);\n        },\n\n        /**\n         * Campaign content\n         */\n        campaignContent: function(content) {\n          ga('set', 'campaignContent', content);\n        },\n\n        /**\n         * Set user language\n         */\n        language: function(language) {\n          ga('set', 'language', language);\n        },\n\n        /**\n         * Set document encoding\n         */\n        encoding: function(encoding) {\n          ga('set', 'encoding', encoding);\n        },\n\n        /**\n         * Anonymize sender's IP address\n         */\n        anonymizeIp: function(anonymizeIp) {\n          ga('set', 'anonymizeIp', !!anonymizeIp);\n        }\n      },\n\n      /**\n       * Tracking interface\n       */\n      track: {\n\n        /**\n         * Register a pageview\n         */\n        pageview: function(page) {\n          ga('send', {\n            hitType: 'pageview',\n            page: page || $location.url()\n          });\n        },\n\n        /**\n         * Register a screenview\n         */\n        screenview: function(screenName) {\n          ga('send', {\n            hitType: 'screenview',\n            screenName: screenName\n          });\n        },\n\n        /**\n         * Register an event\n         */\n        event: function(category, action, label, value) {\n          ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label,\n            eventValue: value\n          });\n        },\n\n        /**\n         * Register a social hit\n         */\n        social: function(network, action, target) {\n          ga('send', {\n            hitType: 'social',\n            socialNetwork: network,\n            socialAction: action,\n            socialTarget: target\n          });\n        },\n\n        /**\n         * Register an exception\n         */\n        exception: function(description, isFatal) {\n          ga('send', {\n            hitType: 'exception',\n            exDescription: description,\n            exFatal: !!isFatal\n          });\n        },\n\n        /**\n         * Register a timing hit\n         */\n        timing: function(category, variable, value, label) {\n          ga('send', {\n            hitType: 'timing',\n            timingCategory: category,\n            timingVar: variable,\n            timingValue: value,\n            timingLabel: label\n          });\n        }\n      }\n    };\n\n    //Return\n    return Analytics;\n  }];\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}